using gpayments.Model;
using gpayments.Utils;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Net;

namespace gpayments
{
    public class FourGeeksPayments
    {
        public Token Token { get; }

        private static string BaseUrl = "https://api.payments.4geeks.io/";
        private static string AuthUrl = $"{BaseUrl}authentication/token/";
        private static string MeUrl = $"{BaseUrl}v1/accounts/me/";
        private static string CustomersUrl = $"{BaseUrl}v1/accounts/customers/";
        private static string CustomerUrl = $"{BaseUrl}v1/accounts/customer/";
        private static string ChargeUrl = $"{BaseUrl}v1/charges/create/";
        private static string SimpleChargeUrl = $"{BaseUrl}v1/charges/simple/create/";
        private static string LogsUrl = $"{BaseUrl}v1/charges/logs/";
        private static string PlanCreateUrl = $"{BaseUrl}v1/plans/create/";
        private static string PlansUrl = $"{BaseUrl}v1/plans/mine/";
        private static string SubscribeUrl = $"{BaseUrl}v1/plans/subscribe/";
        private static string SubscriptionsUrl = $"{BaseUrl}v1/plans/subscriptions/";
        private static string SubscriptionUrl = $"{BaseUrl}v1/plans/subscription/";
        private static string SubscriptionDeleteUrl = $"{BaseUrl}v1/plans/un-subscribe/";
        private static string RefundUrl = $"{BaseUrl}v1/refunds/";

        private const string Varclient_id = "ArYCCMSb29T5lw38efNnaANdwROqDrlqSA5XYfUy";
        private const string Varclient_secret = "mIA842iawD2XhHOiBpOZRcsNthVxsPw3MZCM8tcWA9mm9o8RUK2bjxgU8YnaVwrEXEceSgEtE9rdIhVEDyWUeNXvyHkP7ZwFqVwT6dtEFYpfXsEyFisuSiEEtgZf0wxH";

        /// <summary>
        /// This constructor expects client_id and client_secret generated by 4Geeks
        /// </summary>
        /// <param name="client_id">ClientId</param>
        /// <param name="client_secret">ClientSecret</param>

        /// <summary>
        /// This constructor use the environment variables for ClientId and ClientSecret
        /// </summary>
        public FourGeeksPayments()
        {
            string client_id = Varclient_id;
            string client_secret = Varclient_secret;
            Guard.NotNullOrEmpty(client_id);
            Guard.NotNullOrEmpty(client_secret);

            this.Token = GenerateToken(client_id, client_secret);
        }

        /// <summary>
        /// This method requests a token to 4Geeks.io
        /// </summary>
        /// <param name="client_id">ClientId</param>
        /// <param name="client_secret">ClientSecret</param>
        /// <returns><see cref="Token"/></returns>
        /// 

        private Token GenerateToken(string client_id, string client_secret)
        {
            try
            {
                var client = new RestClient(AuthUrl);
                var request = new RestRequest(Method.POST);

                request.AddHeader("Content-Type", "application/json");
                dynamic jsonObject = new JObject();
                jsonObject.grant_type = "client_credentials";
                jsonObject.client_id = client_id;
                jsonObject.client_secret = client_secret;

                request.AddParameter("application/json", jsonObject, ParameterType.RequestBody);

                return ProcessResponse.Process<Token>(client.Execute(request));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public Me GetMyDevInfo()
        {
            try
            {
                var client = new RestClient(MeUrl);
                var request = new RestRequest(Method.GET);
                request.AddHeader("authorization", $"bearer {this.Token.Access_Token}");

                return ProcessResponse.Process<Me>(client.Execute(request));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public Me UpdateMyDevInfo(Me newMe)
        {
            try
            {
                var client = new RestClient(MeUrl);
                var request = new RestRequest(Method.PUT);
                request.AddHeader("authorization", $"bearer {this.Token.Access_Token}");
                request.AddParameter("application/json", JsonConvert.SerializeObject(newMe), ParameterType.RequestBody);

                return ProcessResponse.Process<Me>(client.Execute(request));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool CreateSimpleCharge(SimpleCharge simpleCharge)
        {
            try
            {
                var client = new RestClient(SimpleChargeUrl);
                var request = new RestRequest(Method.POST);
                request.AddHeader("authorization", $"bearer {this.Token.Access_Token}");

                request.AddParameter("application/json", JsonConvert.SerializeObject(simpleCharge), ParameterType.RequestBody);

                return ProcessResponse.Process(client.Execute(request), HttpStatusCode.Created);
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        static void Main(string[] args)
        {
          
        }

        //public Refund CreateRefund(double amount, string chargeId, string reason)
        //{
        //    try
        //    {
        //        var client = new RestClient(RefundUrl);
        //        var request = new RestRequest(Method.POST);
        //        request.AddHeader("authorization", $"bearer {this.Token.Access_Token}");

        //        request.AddParameter("application/json", JsonConvert.SerializeObject(new
        //        {
        //            amount = amount,
        //            charge_id = chargeId,
        //            reason = reason
        //        }), ParameterType.RequestBody);

        //        return ProcessResponse.Process<Refund>(client.Execute(request));
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }
        //}

        //public IEnumerable<Refund> GetRefunds()
        //{
        //    try
        //    {
        //        var client = new RestClient(RefundUrl);
        //        var request = new RestRequest(Method.GET);
        //        request.AddHeader("authorization", $"bearer {this.Token.Access_Token}");

        //        return ProcessResponse.Process<IEnumerable<Refund>>(client.Execute(request));
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }
        //}

        //public Refund GetRefund(string refundKey)
        //{
        //    try
        //    {
        //        var client = new RestClient($"{RefundUrl}{refundKey}/");
        //        var request = new RestRequest(Method.GET);
        //        request.AddHeader("authorization", $"bearer {this.Token.Access_Token}");

        //        return ProcessResponse.Process<Refund>(client.Execute(request));
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }
        //}
    }
}